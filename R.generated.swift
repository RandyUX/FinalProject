//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Montserrat-Italic-VariableFont_wght.ttf`.
    static let montserratItalicVariableFont_wghtTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Italic-VariableFont_wght", pathExtension: "ttf")
    /// Resource file `Montserrat-VariableFont_wght.ttf`.
    static let montserratVariableFont_wghtTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-VariableFont_wght", pathExtension: "ttf")
    /// Resource file `bank.json`.
    static let bankJson = Rswift.FileResource(bundle: R.hostingBundle, name: "bank", pathExtension: "json")
    /// Resource file `check-mark.json`.
    static let checkMarkJson = Rswift.FileResource(bundle: R.hostingBundle, name: "check-mark", pathExtension: "json")
    /// Resource file `recipient.json`.
    static let recipientJson = Rswift.FileResource(bundle: R.hostingBundle, name: "recipient", pathExtension: "json")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Italic-VariableFont_wght", withExtension: "ttf")`
    static func montserratItalicVariableFont_wghtTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratItalicVariableFont_wghtTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-VariableFont_wght", withExtension: "ttf")`
    static func montserratVariableFont_wghtTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratVariableFont_wghtTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bank", withExtension: "json")`
    static func bankJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bankJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "check-mark", withExtension: "json")`
    static func checkMarkJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.checkMarkJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "recipient", withExtension: "json")`
    static func recipientJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recipientJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-ThinItalic`.
    static let montserratThinItalic = Rswift.FontResource(fontName: "Montserrat-ThinItalic")
    /// Font `Montserrat-Thin`.
    static let montserratThin = Rswift.FontResource(fontName: "Montserrat-Thin")

    /// `UIFont(name: "Montserrat-Thin", size: ...)`
    static func montserratThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratThin, size: size)
    }

    /// `UIFont(name: "Montserrat-ThinItalic", size: ...)`
    static func montserratThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.montserratThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Thin' could not be loaded, is 'Montserrat-VariableFont_wght.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ThinItalic' could not be loaded, is 'Montserrat-Italic-VariableFont_wght.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 34 localization keys.
    struct localizable {
      /// en translation: Add More Transfer
      ///
      /// Locales: en, id
      static let addmoretransferPlaceholder = Rswift.StringResource(key: "addmoretransfer.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Back To Transfer
      ///
      /// Locales: en, id
      static let backhomePlaceholder = Rswift.StringResource(key: "backhome.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Bank: 
      ///
      /// Locales: en
      static let nameofbankPlaceholder = Rswift.StringResource(key: "nameofbank.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Check your Method Transfer
      ///
      /// Locales: en
      static let titleinmethodPlaceholder = Rswift.StringResource(key: "titleinmethod.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Choose
      ///
      /// Locales: en
      static let choosemethodPlaceholder = Rswift.StringResource(key: "choosemethod.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Choose Your Bank
      ///
      /// Locales: en, id
      static let choosebankPlaceholder = Rswift.StringResource(key: "choosebank.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, id
      static let confirmPlaceholder = Rswift.StringResource(key: "confirm.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Confirm User
      ///
      /// Locales: en
      static let confirmuserPlaceholder = Rswift.StringResource(key: "confirmuser.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, id
      static let continuePlaceholder = Rswift.StringResource(key: "continue.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Date: 
      ///
      /// Locales: en
      static let datePlaceholder = Rswift.StringResource(key: "date.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: From Rekening Account
      ///
      /// Locales: en, id
      static let fromrekeningaccountPlaceholder = Rswift.StringResource(key: "fromrekeningaccount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: From: 
      ///
      /// Locales: en
      static let fromrekeningPlaceholder = Rswift.StringResource(key: "fromrekening.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Good Things you choose this method
      ///
      /// Locales: en
      static let thismethodtextPlaceholder = Rswift.StringResource(key: "thismethodtext.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Hi User
      ///
      /// Locales: en
      static let useraccount2Placeholder = Rswift.StringResource(key: "useraccount2.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en
      static let historyPlaceholder = Rswift.StringResource(key: "history.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Input Amount
      ///
      /// Locales: en, id
      static let inputamountPlaceholder = Rswift.StringResource(key: "inputamount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Notes: 
      ///
      /// Locales: en, id
      static let notesPlaceholder = Rswift.StringResource(key: "notes.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Scheduled
      ///
      /// Locales: en
      static let scheduledPlaceholder = Rswift.StringResource(key: "scheduled.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: To Rekening Account
      ///
      /// Locales: en, id
      static let torekeningaccountPlaceholder = Rswift.StringResource(key: "torekeningaccount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: Total Amount: 
      ///
      /// Locales: en
      static let totalamountPlaceholder = Rswift.StringResource(key: "totalamount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transfer
      ///
      /// Locales: en
      static let transferPlaceholder = Rswift.StringResource(key: "transfer.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transfer Status
      ///
      /// Locales: en
      static let transferstatusPlaceholder = Rswift.StringResource(key: "transferstatus.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transfer to: 
      ///
      /// Locales: en
      static let torekeningPlaceholder = Rswift.StringResource(key: "torekening.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Type Your Purpose
      ///
      /// Locales: en
      static let enteringpurposePlaceholder = Rswift.StringResource(key: "enteringpurpose.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: User
      ///
      /// Locales: en
      static let useraccountPlaceholder = Rswift.StringResource(key: "useraccount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your Confirmation Transfer
      ///
      /// Locales: en
      static let yourconfirmationtransferPlaceholder = Rswift.StringResource(key: "yourconfirmationtransfer.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your Transfer Purpose
      ///
      /// Locales: en
      static let yourtransferpurposePlaceholder = Rswift.StringResource(key: "yourtransferpurpose.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: from account:
      ///
      /// Locales: en, id
      static let fromPlaceholder = Rswift.StringResource(key: "from.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: from bank:
      ///
      /// Locales: en, id
      static let yourbankPlaceholder = Rswift.StringResource(key: "yourbank.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: number account: 
      ///
      /// Locales: en
      static let numberaccountPlaceholder = Rswift.StringResource(key: "numberaccount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: time set
      ///
      /// Locales: en
      static let settimetransactionPlaceholder = Rswift.StringResource(key: "settimetransaction.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: to account:
      ///
      /// Locales: en, id
      static let toaccountPlaceholder = Rswift.StringResource(key: "toaccount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: total:
      ///
      /// Locales: en, id
      static let totalPlaceholder = Rswift.StringResource(key: "total.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)
      /// en translation: transaction time:
      ///
      /// Locales: en, id
      static let transactiontimePlaceholder = Rswift.StringResource(key: "transactiontime.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "id"], comment: nil)

      /// en translation: Add More Transfer
      ///
      /// Locales: en, id
      static func addmoretransferPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmoretransfer.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmoretransfer.placeholder"
        }

        return NSLocalizedString("addmoretransfer.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Back To Transfer
      ///
      /// Locales: en, id
      static func backhomePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backhome.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backhome.placeholder"
        }

        return NSLocalizedString("backhome.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Bank: 
      ///
      /// Locales: en
      static func nameofbankPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nameofbank.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nameofbank.placeholder"
        }

        return NSLocalizedString("nameofbank.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Check your Method Transfer
      ///
      /// Locales: en
      static func titleinmethodPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("titleinmethod.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "titleinmethod.placeholder"
        }

        return NSLocalizedString("titleinmethod.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Choose
      ///
      /// Locales: en
      static func choosemethodPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choosemethod.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choosemethod.placeholder"
        }

        return NSLocalizedString("choosemethod.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Choose Your Bank
      ///
      /// Locales: en, id
      static func choosebankPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choosebank.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choosebank.placeholder"
        }

        return NSLocalizedString("choosebank.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, id
      static func confirmPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm.placeholder"
        }

        return NSLocalizedString("confirm.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Confirm User
      ///
      /// Locales: en
      static func confirmuserPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmuser.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirmuser.placeholder"
        }

        return NSLocalizedString("confirmuser.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, id
      static func continuePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("continue.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "continue.placeholder"
        }

        return NSLocalizedString("continue.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Date: 
      ///
      /// Locales: en
      static func datePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("date.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "date.placeholder"
        }

        return NSLocalizedString("date.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: From Rekening Account
      ///
      /// Locales: en, id
      static func fromrekeningaccountPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fromrekeningaccount.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fromrekeningaccount.placeholder"
        }

        return NSLocalizedString("fromrekeningaccount.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: From: 
      ///
      /// Locales: en
      static func fromrekeningPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fromrekening.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fromrekening.placeholder"
        }

        return NSLocalizedString("fromrekening.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Good Things you choose this method
      ///
      /// Locales: en
      static func thismethodtextPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thismethodtext.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "thismethodtext.placeholder"
        }

        return NSLocalizedString("thismethodtext.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Hi User
      ///
      /// Locales: en
      static func useraccount2Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("useraccount2.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "useraccount2.placeholder"
        }

        return NSLocalizedString("useraccount2.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en
      static func historyPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("history.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "history.placeholder"
        }

        return NSLocalizedString("history.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Input Amount
      ///
      /// Locales: en, id
      static func inputamountPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("inputamount.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "inputamount.placeholder"
        }

        return NSLocalizedString("inputamount.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Notes: 
      ///
      /// Locales: en, id
      static func notesPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notes.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notes.placeholder"
        }

        return NSLocalizedString("notes.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Scheduled
      ///
      /// Locales: en
      static func scheduledPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheduled.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheduled.placeholder"
        }

        return NSLocalizedString("scheduled.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: To Rekening Account
      ///
      /// Locales: en, id
      static func torekeningaccountPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("torekeningaccount.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "torekeningaccount.placeholder"
        }

        return NSLocalizedString("torekeningaccount.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount: 
      ///
      /// Locales: en
      static func totalamountPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("totalamount.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "totalamount.placeholder"
        }

        return NSLocalizedString("totalamount.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Transfer
      ///
      /// Locales: en
      static func transferPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transfer.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transfer.placeholder"
        }

        return NSLocalizedString("transfer.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Transfer Status
      ///
      /// Locales: en
      static func transferstatusPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transferstatus.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transferstatus.placeholder"
        }

        return NSLocalizedString("transferstatus.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Transfer to: 
      ///
      /// Locales: en
      static func torekeningPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("torekening.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "torekening.placeholder"
        }

        return NSLocalizedString("torekening.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Type Your Purpose
      ///
      /// Locales: en
      static func enteringpurposePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enteringpurpose.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enteringpurpose.placeholder"
        }

        return NSLocalizedString("enteringpurpose.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: User
      ///
      /// Locales: en
      static func useraccountPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("useraccount.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "useraccount.placeholder"
        }

        return NSLocalizedString("useraccount.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Your Confirmation Transfer
      ///
      /// Locales: en
      static func yourconfirmationtransferPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yourconfirmationtransfer.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yourconfirmationtransfer.placeholder"
        }

        return NSLocalizedString("yourconfirmationtransfer.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Your Transfer Purpose
      ///
      /// Locales: en
      static func yourtransferpurposePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yourtransferpurpose.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yourtransferpurpose.placeholder"
        }

        return NSLocalizedString("yourtransferpurpose.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: from account:
      ///
      /// Locales: en, id
      static func fromPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("from.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "from.placeholder"
        }

        return NSLocalizedString("from.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: from bank:
      ///
      /// Locales: en, id
      static func yourbankPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yourbank.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yourbank.placeholder"
        }

        return NSLocalizedString("yourbank.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: number account: 
      ///
      /// Locales: en
      static func numberaccountPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("numberaccount.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "numberaccount.placeholder"
        }

        return NSLocalizedString("numberaccount.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: time set
      ///
      /// Locales: en
      static func settimetransactionPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settimetransaction.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settimetransaction.placeholder"
        }

        return NSLocalizedString("settimetransaction.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: to account:
      ///
      /// Locales: en, id
      static func toaccountPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toaccount.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toaccount.placeholder"
        }

        return NSLocalizedString("toaccount.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: total:
      ///
      /// Locales: en, id
      static func totalPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("total.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "total.placeholder"
        }

        return NSLocalizedString("total.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: transaction time:
      ///
      /// Locales: en, id
      static func transactiontimePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactiontime.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactiontime.placeholder"
        }

        return NSLocalizedString("transactiontime.placeholder", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
